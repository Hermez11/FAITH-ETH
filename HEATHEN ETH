// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// HEATHEN Token Contract
contract HEATHEN is ERC20, Ownable {
    constructor() ERC20("HEATHEN Token", "HEATHEN") {}

    // Function to mint HEATHEN tokens
    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    // Override transfer functions to prevent transfers
    function _transfer(address from, address to, uint256 amount) internal override {
        require(from == address(0) || to == address(0), "HEATHEN tokens are non-transferable");
        super._transfer(from, to, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(false, "HEATHEN tokens are non-transferable");
        return false;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(false, "HEATHEN tokens are non-transferable");
        return false;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        require(false, "HEATHEN tokens are non-transferable");
        return false;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return 0;
    }

    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {
        require(false, "HEATHEN tokens are non-transferable");
        return false;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {
        require(false, "HEATHEN tokens are non-transferable");
        return false;
    }
}
